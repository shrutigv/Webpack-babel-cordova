{"version":3,"sources":["../src/helper.js"],"names":[],"mappings":";;;;;;AAAA;;AACA;;;;;;AACA,IAAM,OAAO,QAAQ,GAAR,EAAb;;AAEA,SAAS,2BAAT,CAAqC,IAArC,EAA2C,QAA3C,EAA0E;AAAA,MAArB,cAAqB,yDAAJ,EAAI;;AACxE,MAAM,WAAW,mBAAQ,QAAR,CAAjB;AACA,MAAI,WAAW,IAAX,EAAiB,IAAjB,CAAJ,EAA4B;AAC1B,QAAM,eAAe,KAAK,SAAL,CAAe,CAAf,EAAkB,KAAK,MAAvB,CAArB;AACA,QAAI,WAAW,cAAX,EAA2B,IAA3B,CAAJ,EAAsC;AACpC,UAAM,UAAS,eAAe,SAAf,CAAyB,CAAzB,EAA4B,eAAe,MAA3C,CAAf;AACA,UAAM,YAAY,mBAAQ,kBAAQ,IAAR,CAAa,QAAb,CAAR,CAAlB;AACA,aAAO,OAAO,oBAAS,QAAT,OAAsB,SAAtB,GAAkC,OAAlC,SAA4C,YAA5C,CAAd;AACD;AACD,QAAM,SAAS,MAAM,eAAe,OAAf,CAAuB,cAAvB,EAAuC,EAAvC,CAArB;AACA,WAAO,OAAO,oBAAS,QAAT,OAAsB,IAAtB,GAA6B,MAA7B,SAAuC,YAAvC,CAAd;AACD;AACD,MAAI,OAAO,IAAP,KAAgB,QAApB,EAA8B;AAC5B,WAAO,IAAP;AACD;AACD,QAAM,IAAI,KAAJ,CAAU,uBAAV,CAAN;AACD;;AAED,SAAS,UAAT,CAAoB,MAApB,EAA4B,MAA5B,EAAoC;AAClC,MAAI,mBAAmB,KAAvB;;AAEA,MAAI,OAAO,MAAP,KAAkB,QAAtB,EAAgC;AAC9B,QAAM,0BAA0B,OAAO,SAAP,CAAiB,CAAjB,EAAoB,OAAO,MAA3B,CAAhC;AACA,QAAI,4BAA4B,MAAhC,EAAwC;AACtC,yBAAmB,IAAnB;AACD;AACF;;AAED,SAAO,gBAAP;AACD;;kBAEc,EAAC,wDAAD,EAA8B,sBAA9B,E","file":"helper.js","sourcesContent":["import {dirname, relative} from 'path';\nimport findPkg from 'find-pkg';\nconst root = process.cwd();\n\nfunction transformRelativeToRootPath(path, filePath, rootPathSuffix = '') {\n  const fileBase = dirname(filePath);\n  if (startsWith(path, '~/')) {\n    const withoutTilde = path.substring(2, path.length);\n    if (startsWith(rootPathSuffix, '%/')) {\n      const suffix = rootPathSuffix.substring(1, rootPathSuffix.length);\n      const localRoot = dirname(findPkg.sync(fileBase));\n      return './' + relative(fileBase, `${localRoot}${suffix}/${withoutTilde}`);\n    }\n    const suffix = '/' + rootPathSuffix.replace(/^(\\/)|(\\/)$/g, '');\n    return './' + relative(fileBase, `${root}${suffix}/${withoutTilde}`);\n  }\n  if (typeof path === 'string') {\n    return path;\n  }\n  throw new Error('ERROR: No path passed');\n}\n\nfunction startsWith(string, target) {\n  let startsWithTarget = false;\n\n  if (typeof string === 'string') {\n    const firstCharactersOfString = string.substring(0, target.length);\n    if (firstCharactersOfString === target) {\n      startsWithTarget = true;\n    }\n  }\n\n  return startsWithTarget;\n}\n\nexport default {transformRelativeToRootPath, startsWith};\n"]}