'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _path = require('path');

var _findPkg = require('find-pkg');

var _findPkg2 = _interopRequireDefault(_findPkg);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var root = process.cwd();

function transformRelativeToRootPath(path, filePath) {
  var rootPathSuffix = arguments.length <= 2 || arguments[2] === undefined ? '' : arguments[2];

  var fileBase = (0, _path.dirname)(filePath);
  if (startsWith(path, '~/')) {
    var withoutTilde = path.substring(2, path.length);
    if (startsWith(rootPathSuffix, '%/')) {
      var _suffix = rootPathSuffix.substring(1, rootPathSuffix.length);
      var localRoot = (0, _path.dirname)(_findPkg2.default.sync(fileBase));
      return './' + (0, _path.relative)(fileBase, '' + localRoot + _suffix + '/' + withoutTilde);
    }
    var suffix = '/' + rootPathSuffix.replace(/^(\/)|(\/)$/g, '');
    return './' + (0, _path.relative)(fileBase, '' + root + suffix + '/' + withoutTilde);
  }
  if (typeof path === 'string') {
    return path;
  }
  throw new Error('ERROR: No path passed');
}

function startsWith(string, target) {
  var startsWithTarget = false;

  if (typeof string === 'string') {
    var firstCharactersOfString = string.substring(0, target.length);
    if (firstCharactersOfString === target) {
      startsWithTarget = true;
    }
  }

  return startsWithTarget;
}

exports.default = { transformRelativeToRootPath: transformRelativeToRootPath, startsWith: startsWith };
//# sourceMappingURL=helper.js.map